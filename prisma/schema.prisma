// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ReactionType {
  LIKE
  DISLIKE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  reactions     Reaction[]
  comments      Comment[]
  commentVotes  CommentVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id           String   @id @default(cuid())
  title        String
  description  String?
  thumbnailKey String
  videoKey     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  reactions Reaction[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Reaction {
  user    User         @relation(fields: [userId], references: [id])
  userId  String
  video   Video        @relation(fields: [videoId], references: [id])
  videoId String
  type    ReactionType

  @@id([userId, videoId])
}

model CommentVote {
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      ReactionType

  @@id([userId, commentId])
}
